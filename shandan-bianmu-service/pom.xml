<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.keyware.shandan</groupId>
        <artifactId>shandan</artifactId>
        <version>1.0.0</version>
    </parent>

    <artifactId>shandan-bianmu-service</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0</version>

    <properties>
        <output.dependence.file.path>lib/</output.dependence.file.path>
        <output.resource.file.path>resources/</output.resource.file.path>
    </properties>

    <dependencies>

        <!--热部署工具dev-tools-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
            <!--<scope>runtime</scope>-->
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- springboot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- thymeleaf模板 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- 阿里巴巴数据源连接池-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>

        <!--基于mybatis plus的数据库反向代码生成工具-->
        <dependency>
            <groupId>com.github.davidfantasy</groupId>
            <artifactId>mybatis-plus-generator-ui</artifactId>
        </dependency>

        <!-- 项目模块依赖 -->
        <dependency>
            <groupId>com.keyware.shandan</groupId>
            <artifactId>shandan-bianmu-core</artifactId>
            <version>1.0.0</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <!--构建工具-->
    <build>
        <plugins>

            <!--移除配置文件将其不打包进jar包中，并可以将打包后的jar包输出到指定路径 -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    &lt;!&ndash; 剔除配置文件或目录:注意从编译结果目录开始算目录结构excludes\includes 是根据编译后的classes这个路径计算的&ndash;&gt;
                    <excludes>
                        &lt;!&ndash; 剔除指定后缀配置文件 &ndash;&gt;
                        <exclude>*.properties</exclude>
                        <exclude>*.yml</exclude>
                        <exclude>*/*.properties</exclude>
                        <exclude>*/*.yml</exclude>
                    </excludes>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            &lt;!&ndash; MANIFEST.MF 中 Class-Path 各个依赖加入前缀 &ndash;&gt;
                            &lt;!&ndash;lib文件夹内容，需要 maven-dependency-plugin插件补充 (依赖包剥离位置)&ndash;&gt;
                            <classpathPrefix>${output.dependence.file.path}</classpathPrefix>
                            &lt;!&ndash; jar包不包含唯一版本标识 &ndash;&gt;
                            <useUniqueVersions>false</useUniqueVersions>
                            &lt;!&ndash;指定入口类 &ndash;&gt;
                            <mainClass>com.keyware.shandan.BianmuApplication</mainClass>
                        </manifest>
                        <manifestEntries>
                            &lt;!&ndash;MANIFEST.MF 中 Class-Path 加入自定义路径，多个路径用空格隔开 &ndash;&gt;
                            &lt;!&ndash;此处resources文件夹的内容，需要maven-resources-plugin插件补充上 (配置文件剥离位置)&ndash;&gt;
                            <Class-Path>./${output.resource.file.path}</Class-Path>
                        </manifestEntries>
                    </archive>
                    &lt;!&ndash;输出目录&ndash;&gt;
                    <outputDirectory>${project.build.directory}/${project.artifactId}</outputDirectory>
                </configuration>
            </plugin>
            &lt;!&ndash; 将依赖包导出到指定文件夹 &ndash;&gt;
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            &lt;!&ndash;依赖包的输出路径&ndash;&gt;
                            <outputDirectory>${project.build.directory}/${project.artifactId}/${output.dependence.file.path}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            &lt;!&ndash; 将需要复制的文件复制到指定路径（例：将配置文件提取到指定路径） &ndash;&gt;
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    &lt;!&ndash; 复制配置文件 &ndash;&gt;
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            &lt;!&ndash; 复制哪些目录下的哪些文件到指定目录 &ndash;&gt;
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    &lt;!&ndash; 不配置excludes\includes默认就是复制指定目录的所有文件 &ndash;&gt;
                                    <includes>
                                        <include>*.properties</include>
                                        <include>*.yml</include>
                                        <include>*/*.properties</include>
                                        <include>*/*.properties</include>
                                    </includes>
                                </resource>
                            </resources>
                            <outputDirectory>${project.build.directory}/${project.artifactId}/${output.resource.file.path}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            &lt;!&ndash;maven打包时，跳过测试&ndash;&gt;
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            &lt;!&ndash; 指定多个源代码目录、多个资源文件目录 &ndash;&gt;
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                &lt;!&ndash;<version>1.8</version>&ndash;&gt;
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/main/java</source>
                                <source>src/main/library</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            &lt;!&ndash; 编译插件 &ndash;&gt;
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>-->

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                    <addResources>true</addResources>
                    <mainClass>com.keyware.shandan.BianmuApplication</mainClass>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>assemble</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!--lib下直接存放jar，没有路径文件夹（如com/apache)，如果没有这个选项则放在lib下的jar包会被com/apache类似的多层文件夹包裹起来-->
                    <repositoryLayout>flat</repositoryLayout>
                    <configurationDirectory>conf</configurationDirectory>
                    <configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
                    <copyConfigurationDirectory>true</copyConfigurationDirectory>
                    <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
                    <!--生成的项目的目录位置，这里的client是项目的名称，你可以根据你的需要自己随便命名-->
                    <assembleDirectory>${project.build.directory}/client</assembleDirectory>
                    <!--java启动参数-->
                    <extraJvmArguments>-Xms128m</extraJvmArguments>
                    <binFileExtensions>
                        <unix>.sh</unix>
                    </binFileExtensions>
                    <platforms>
                        <platform>windows</platform>
                        <platform>unix</platform>
                    </platforms>
                    <repositoryName>lib</repositoryName>
                    <programs>
                        <program>
                            <!--指定主类，脚本名。会生成shell/bat两种类型,也可用platforms指定运行平台-->
                            <mainClass>com.keyware.shandan.BianmuApplication</mainClass>
                            <!-- 生成的脚本文件的名称，比如start.sh,你也可以根据你的需要命名成其他名字 -->
                            <name>startup</name>
                        </program>
                    </programs>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>